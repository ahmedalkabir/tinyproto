version: 2.1
orbs:
  coveralls: coveralls/coveralls@1.0.6
jobs:
  build:
    # Linux gcc, clang, AVR
    machine:
      image: ubuntu-2004:202101-01
    steps:
      # install dependencies
      - run:
          name: Install apt dependencies
          command: |
            sudo apt update
            sudo apt install -y gcc g++ clang clang-format libsdl2-dev
            sudo apt install -y cppcheck cpputest doxygen avr-libc gcc-avr graphviz socat
            sudo pip3 install cpp-coveralls
            pip3 install --user cpp-coveralls
      # code checkout
      - checkout
#      - run:
#          name: Pull Submodules
#          command: git submodule init && git submodule update --remote
      # Building
      - run:
          name: Building documentation
          command: make docs 1> /dev/null
      - run:
          name: Building via gcc and running unit tests
          command: |
             make
             ./.travis/run_tests.sh
             make clean
             make ARCH=linux EXTRA_CPPFLAGS="--coverage" check
#      - coveralls/upload
      - run:
          name: Upload coverage statistics
          command: |
             sudo find / -name coveralls
             echo -e "service_name: circle-ci\n" > .coveralls.yml \
             && TRAVIS_JOB_ID="#${CIRCLE_BUILD_NUM}" COVERALLS_REPO_TOKEN=4Ia7t9YDo22zQcFEnMYLh1tiWCRlBJlhk coveralls -b . \
             --exclude docs --exclude extra --exclude unittest --exclude bld --exclude tools --exclude examples --gcov-options '\-lp'
#      - store_artifacts:
#          path: embedded/target/bin.elf
#          destination: binary.elf
      - run:
          # CPPFLAGS="-I/usr/include/SDL2" is the workaround for known Ubuntu 20.04 issue
          name: Building via clang
          command: |
            make clean
            CC=clang CXX=clang++ LD=clang++ make
            make install DESTDIR=test_path
            ./.travis/check_install.sh . test_path
            make cppcheck
      - run:
          name: Building for AVR
          command: |
            make clean
            make ARCH=avr
# Free plan doesn't have concurrent jobs
      # Install esp32 SDK
      - restore_cache:
          key: ESP32_SDK
      - checkout
      - run:
          name: Install ESP32 SDK
          command: |
            ./.travis/setup_esp_build_env.sh travis
      - save_cache:
          key: ESP32_SDK
          paths:
            - ~/esp
            - ~/.espressif
      - run:
          name: Building ESP32 code
          command: |
            . ~/esp/esp-idf/export.sh
            cd examples/esp32_idf/uart/tinyfd_loopback/components/tinyproto && ln -s ../../../../../../src && ln -s ../../../../../../component.mk
            cd ../.. && make defconfig
            make

# Orchestrate our job run sequence
workflows:
  version: 2.1
  host_and_esp32:
    jobs:
#      - build
#      - esp32:
#          requires:
#            - build
      - build:
#          context: github
          filters:
            branches:
              only: master
